// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum borderStyles {
  circle
  square
  squircle
}

enum fontSizes {
  small
  medium
  large
}

type CustomSocialLink {
  label String?
  link  String?
}

type SocialLinks {
  linkedin  String?
  instagram String?
  github    String?
  website   String?
  twitter   String?
  threads   String?
  custom    CustomSocialLink[]
}

type PersonalDetails {
  profilePicture String?
  firstName      String?
  lastName       String?
  jobTitle       String?
  gender         String?
  phone          String?
  email          String?
  country        String?
  city           String?
  summary        String?
}

type Educations {
  institution String?
  degree      String?
  score       String?
  startDate   String?
  endDate     String?
  current     Boolean? @default(false)
  description String?
}

type WorkExperience {
  position    String?
  employer    String?
  description String?
  jobType     String?
  location    String?
  startDate   String?
  endDate     String?
  current     Boolean? @default(false)
}

type SkillItem {
  name          String?
  level         Int?
  levelDisabled Boolean? @default(true)
}

type CommonAchievement {
  title        String?
  organization String?
  link         String?
  score        String?
  description  String?
  startDate    String?
  endDate      String?
}

type Hobby {
  name        String?
  description String?
}

type Project {
  name         String?
  description  String?
  organization String?
  startDate    String?
  endDate      String?
  link         String?
}

type TemplateDetails {
  templateId  String       @default("ats-template-1")
  textHex     String       @default("#000000")
  accentHex   String       @default("#000000")
  backdropHex String       @default("#FFFFFF")
  fontFace    String?
  fontSize    fontSizes    @default(medium)
  borderStyle borderStyles @default(squircle)
}

model Resume {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  title       String? @default("Untitled")
  description String?

  personalDetails  PersonalDetails
  socialLinks      SocialLinks
  educationDetails Educations[]
  workExperiences  WorkExperience[]
  projects         Project[]
  hardSkills       SkillItem[]
  softSkills       SkillItem[]
  certifications   CommonAchievement[]
  courses          CommonAchievement[]
  achievements     CommonAchievement[]
  awards           CommonAchievement[]
  hobbies          Hobby[]

  template TemplateDetails

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resumes")
}

model Subscriptions {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model User {
  clerkId    String    @id @map("_id")
  email      String
  verified   Boolean   @default(false)
  name       String?
  username   String?
  deleted    Boolean   @default(false)
  deletedAt  DateTime?
  firstVisit Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
